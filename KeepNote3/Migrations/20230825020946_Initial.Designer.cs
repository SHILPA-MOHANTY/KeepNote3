// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeepNote3.Migrations
{
    [DbContext(typeof(KeepDbContext))]
    [Migration("20230825020946_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KeepNote3.Entities.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<int>("categoryCreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("categoryCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("categoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.HasIndex("categoryCreatedBy");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KeepNote3.Entities.Note", b =>
                {
                    b.Property<int>("noteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("noteId"));

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("noteId");

                    b.HasIndex("categoryId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("KeepNote3.Entities.Reminder", b =>
                {
                    b.Property<int>("reminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reminderId"));

                    b.Property<int>("ReminderCreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReminderCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("reminderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reminderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remindrType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("reminderId");

                    b.HasIndex("ReminderCreatedBy");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("KeepNote3.Entities.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KeepNote3.Entities.Category", b =>
                {
                    b.HasOne("KeepNote3.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("categoryCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("KeepNote3.Entities.Note", b =>
                {
                    b.HasOne("KeepNote3.Entities.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("KeepNote3.Entities.Reminder", b =>
                {
                    b.HasOne("KeepNote3.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ReminderCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
